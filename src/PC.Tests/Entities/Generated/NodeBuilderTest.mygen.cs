/*****************************************************************************/
/***                                                                       ***/
/***    This is an automatically generated file. It is generated using     ***/
/***    MyGeneration in conjunction with IBatisBusinessObject template.    ***/
/***                                                                       ***/
/***    DO NOT MODIFY THIS FILE DIRECTLY!                                  ***/
/***                                                                       ***/
/***    If you need to make changes either modify the template and         ***/
/***    regenerate or derive a class from this class and override.         ***/
/***                                                                       ***/
/*****************************************************************************/

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Reflection;
using System.Runtime.Serialization;
using System.Linq;
using Microsoft.FSharp.Collections;

using PebbleCode.Framework.Collections;
using PebbleCode.Framework.Dates;
using PebbleCode.Framework.Utilities;
using PebbleCode.Entities;
using PebbleCode.ExpressionTree;

namespace PebbleCode.Tests.Entities
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public partial class NodeBuilderTest : Entity
	{
        /// <summary>
        /// Get the entity type
        /// </summary>
		public override Flags EntityFlag { get { return EntityType.NodeBuilderTest; } }
		
		#region Private Members
		[DataMember]
		private int _id;
		[DataMember]
		private int _field1;
		[DataMember]
		private string _field2;
		[DataMember]
		private string _nodeIdField;
		#endregion
		
		/// <summary>
        /// Constructor
		/// </summary>
		public NodeBuilderTest()
		{
			// Initialise database field values
			OnCreated();
		}
		
		
		
		#region Public Properties
			
		/// <summary>
		/// Public accessor for _id
		/// </summary>		
		public virtual int Id
		{
			get { return _id; }
		}
		
		/// <summary>
		/// Public accessor for _field1
		/// </summary>		
		public virtual int Field1
		{
			get { return _field1; }
			set
			{
				if (_field1 != value && PropertyValueChanging("Field1", value))
				{
					_field1 = value;
					PropertyValueChanged("Field1");
				}
			}
		}
		
		/// <summary>
		/// Public accessor for _field2
		/// </summary>		
		public virtual string Field2
		{
			get { return _field2; }
			set
			{
				if (value != null) 
				{
					value = value.Trim();
				}
			  
				if (_field2 != value && PropertyValueChanging("Field2", value))
				{
					_field2 = value;
					PropertyValueChanged("Field2");
				}
			}
		}
		
		/// <summary>
		/// Public accessor for _nodeIdField
		/// </summary>		
		public virtual string NodeIdField
		{
			get { return _nodeIdField; }
			set
			{
				if (value != null) 
				{
					value = value.Trim();
				}
			  
				if (_nodeIdField != value && PropertyValueChanging("NodeIdField", value))
				{
					_nodeIdField = value;
					PropertyValueChanged("NodeIdField");
				}
			}
		}
		
		#endregion
		
		#region Database Properties
			
		/// <summary>
		/// Database accessor for _id. Only used by IBatis.
		/// </summary>
		[SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
		internal int DbId
		{
			get { return _id;  }
			set { _id = value; }
		}

		/// <summary>
		/// Database accessor for _field1. Only used by IBatis.
		/// </summary>
		[SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
		internal int DbField1
		{
			get { return _field1;  }
			set { _field1 = value; }
		}

		/// <summary>
		/// Database accessor for _field2. Only used by IBatis.
		/// </summary>
		[SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
		internal string DbField2
		{
			get { return _field2;  }
			set { _field2 = value; }
		}

		/// <summary>
		/// Database accessor for _nodeIdField. Only used by IBatis.
		/// </summary>
		[SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
		internal string DbNodeIdField
		{
			get { return _nodeIdField;  }
			set { _nodeIdField = value; }
		}

		#endregion
		
		#region Node Builder
		

		/// <summary>
        /// Building Field1 Node
        /// </summary>
		/// <param name="displayName">Optional, defaults to field's property name when empty or null</param>
        /// <returns>Value Node for Field1 </returns>
        public Node BuildNode_Field1(string displayName = null)
        {
            NodeMeta meta = new NodeMeta(BuildNodeId_Field1());
            SetCommonAttributes(meta);
			if (string.IsNullOrWhiteSpace(displayName))
			{
				displayName = 
					GetNodeIdCodes(_nodeIdField)
					.Aggregate("Field1", (current, code) => current + " " + code);
			}
			meta.Name = displayName;
            return Node.NewValue(meta, ValueSource.Entity, Convert.ToDecimal(_field1));
        }
			
		/// <summary>
		///	Build NodeId to uniquely identify Field1 by NodeBuilderTest
		/// </summary>
		public static NodeId BuildNodeId_Field1(NodeBuilderTest nodeBuilderTest)
        {
            return nodeBuilderTest != null ?
                BuildNodeId_Field1(nodeBuilderTest.NodeIdField)
                : BuildNodeId_Field1(nodeIdField: null);
        }
		
		/// <summary>
		///	Build NodeId to uniquely identify Field1
		/// </summary>
		public static NodeId BuildNodeId_Field1(string nodeIdField)
        {
            return BuildNodeId("NodeBuilderTest_Field1", nodeIdField);
        }
		
		/// <summary>
		///	Build NodeId to uniquely identify Field1
		/// </summary>
		public NodeId BuildNodeId_Field1()
        {
            return BuildNodeId("NodeBuilderTest_Field1", _nodeIdField);
        }

		/// <summary>
        /// Building Field2 Node
        /// </summary>
		/// <param name="displayName">Optional, defaults to field's property name when empty or null</param>
        /// <returns>Value Node for Field2 </returns>
        public Node BuildNode_Field2(string displayName = null)
        {
            NodeMeta meta = new NodeMeta(BuildNodeId_Field2());
            SetCommonAttributes(meta);
			if (string.IsNullOrWhiteSpace(displayName))
			{
				displayName = 
					GetNodeIdCodes(_nodeIdField)
					.Aggregate("Field2", (current, code) => current + " " + code);
			}
			meta.Name = displayName;
            return Node.NewValue(meta, ValueSource.Entity, Convert.ToDecimal(_field2));
        }
			
		/// <summary>
		///	Build NodeId to uniquely identify Field2 by NodeBuilderTest
		/// </summary>
		public static NodeId BuildNodeId_Field2(NodeBuilderTest nodeBuilderTest)
        {
            return nodeBuilderTest != null ?
                BuildNodeId_Field2(nodeBuilderTest.NodeIdField)
                : BuildNodeId_Field2(nodeIdField: null);
        }
		
		/// <summary>
		///	Build NodeId to uniquely identify Field2
		/// </summary>
		public static NodeId BuildNodeId_Field2(string nodeIdField)
        {
            return BuildNodeId("NodeBuilderTest_Field2", nodeIdField);
        }
		
		/// <summary>
		///	Build NodeId to uniquely identify Field2
		/// </summary>
		public NodeId BuildNodeId_Field2()
        {
            return BuildNodeId("NodeBuilderTest_Field2", _nodeIdField);
        }

		/// <summary>
		/// Building uniuqe NodeId
		/// </summary>
		private static NodeId BuildNodeId(string nodeName, string nodeIdField)
        {
            return new NodeId(nodeName, ListModule.OfSeq(GetNodeIdCodes(nodeIdField)));
		}
		
		/// <summary>
		/// Get uniuqe NodeId codes
		/// </summary>
		private static IEnumerable<string> GetNodeIdCodes(string nodeIdField)
        {
            var codes =
		        new List<string>
		            {
						nodeIdField ?? string.Empty
					};
			return codes.Where(code => !string.IsNullOrEmpty(code));
		}

		/// <summary>
        /// Setting up common attributes to node
        /// </summary>
        /// <param name="container"></param>
		private void SetCommonAttributes(IAttributeContainer container)
        {
			SetCustomAttributes(container);
		}

		#endregion
		
		#region IClonable Members
		
		/// <summary>
		///	Returns a copy of the instance of NodeBuilderTest
		/// </summary>
		/// <remarks>
		/// Overrides the base version, but calls OnClone to allow base classes chance
		/// to clone their information
		/// </remarks>
		public override object Clone()
        {
			// All of the value types are cloned using memberwise clone
			NodeBuilderTest clone = (NodeBuilderTest)this.MemberwiseClone();

			// Copy any other instances which are not known about by myGen
			OnClone(clone);
		
			// Return our pristine clone!
            return clone;
		}
		
		#endregion		
		
		#region Test Utilities
		
		/// <summary>
		/// Used for testing - allows stub objects to be created simply.  Ensure that
		/// the test assembly's name is added to AssemblyInfo (in your projects entities 
		/// dll - e.g. CT.Entities) inside an InternalsVisisbleToAttribute
		/// </summary>
		/// <param name="id">ID to use for test stub</param>
		internal virtual void SetId(int id)
		{
			_id = id;
			_isNew = false;
		}
		
		#endregion		
		
		/// <summary>
		/// Overriden method to get the Id of the entity
		/// </summary>
		public override int Identity
		{
			get { return _id; }
		}
	}

    /// <summary>
    /// Event args class for NodeBuilderTest
    /// </summary>
    public class NodeBuilderTestEventArgs : EventArgs
    {
        public NodeBuilderTest NodeBuilderTest { get; private set; }

        public NodeBuilderTestEventArgs(NodeBuilderTest nodeBuilderTest)
        {
            NodeBuilderTest = nodeBuilderTest;
        }
    }
}