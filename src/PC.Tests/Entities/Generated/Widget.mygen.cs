/*****************************************************************************/
/***                                                                       ***/
/***    This is an automatically generated file. It is generated using     ***/
/***    MyGeneration in conjunction with IBatisBusinessObject template.    ***/
/***                                                                       ***/
/***    DO NOT MODIFY THIS FILE DIRECTLY!                                  ***/
/***                                                                       ***/
/***    If you need to make changes either modify the template and         ***/
/***    regenerate or derive a class from this class and override.         ***/
/***                                                                       ***/
/*****************************************************************************/

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Reflection;
using System.Runtime.Serialization;
using System.Linq;
using Microsoft.FSharp.Collections;

using PebbleCode.Framework.Collections;
using PebbleCode.Framework.Dates;
using PebbleCode.Framework.Utilities;
using PebbleCode.Entities;
using PebbleCode.ExpressionTree;

namespace PebbleCode.Tests.Entities
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public partial class Widget : Entity
	{
        /// <summary>
        /// Get the entity type
        /// </summary>
		public override Flags EntityFlag { get { return EntityType.Widget; } }
		
		#region Private Members
		[DataMember]
		private int _id;
		[DataMember]
		private int _thingId;
		[DataMember]
		private string _description;
		#endregion
		
		/// <summary>
        /// Constructor
		/// </summary>
		public Widget()
		{
			// Initialise database field values
			OnCreated();
		}
		
		#region Foreign Key Entities
				
        /// <summary>
        /// Get the associated Thing
        /// </summary>
        public Thing Thing
        {
            get 
            {
                if (!_thingPopulated)
                    throw new InvalidOperationException("_thing not populated yet");
                return _thing;
            }
			set
			{
				_thing = value;
				_thingPopulated = true;
				ThingId = value.Identity;
			}
        }
		
		[DataMember]
		private Thing _thing = null;
		[DataMember]
		private bool _thingPopulated = false;
		
        /// <summary>
        /// Is Thing getable yet?
        /// </summary>
        public bool ThingPopulated
        {
            get { return _thingPopulated; }
        }
		
        /// <summary>
        /// Does Thing require population?
        /// </summary>
        public bool ThingRequiresPopulation
        {
            get 
			{
				return _thingPopulated == false; 
			}
        }
		
        /// <summary>
        /// Clear Thing and mark as not populated anymore
        /// </summary>
        public void UnpopulateThing()
        {
			_thingPopulated = false;
			_thing = null;
        }
		#endregion
		#region Foreign Key Collections
				
        /// <summary>
        /// Get the associated FieldTestListUsingForeignKeyField
        /// </summary>
        public FieldTestList FieldTestListUsingForeignKeyField
        {
            get 
            {
                if (_fieldTestListUsingForeignKeyField == null)
					if (IsNew)
						_fieldTestListUsingForeignKeyField = new FieldTestList();
					else
						throw new InvalidOperationException("_fieldTestListUsingForeignKeyField not populated yet");
                return _fieldTestListUsingForeignKeyField;
            }
        }
		
		[DataMember]
		private FieldTestList _fieldTestListUsingForeignKeyField = null;
		
        /// <summary>
        /// Is FieldTestListUsingForeignKeyField getable yet?
        /// </summary>
        public bool FieldTestListUsingForeignKeyFieldPopulated
        {
            get { return _fieldTestListUsingForeignKeyField != null; }
        }

        /// <summary>
        /// Populate FieldTestListUsingForeignKeyField
        /// </summary>
        /// <param name="fieldTestList"></param>
        public void PopulateFieldTestListUsingForeignKeyField(IEnumerable<FieldTest> fieldTestList)
        {
			if (fieldTestList == null)
				_fieldTestListUsingForeignKeyField = new FieldTestList();
			else
				_fieldTestListUsingForeignKeyField = new FieldTestList(fieldTestList);
        }
		
        /// <summary>
        /// Clear all items from FieldTestListUsingForeignKeyField and mark as not populated anymore
        /// </summary>
        public void UnpopulateFieldTestListUsingForeignKeyField()
        {
            _fieldTestListUsingForeignKeyField = null;
        }
				
        /// <summary>
        /// Get the associated FieldTestListUsingForeignKeyFieldNullable
        /// </summary>
        public FieldTestList FieldTestListUsingForeignKeyFieldNullable
        {
            get 
            {
                if (_fieldTestListUsingForeignKeyFieldNullable == null)
					if (IsNew)
						_fieldTestListUsingForeignKeyFieldNullable = new FieldTestList();
					else
						throw new InvalidOperationException("_fieldTestListUsingForeignKeyFieldNullable not populated yet");
                return _fieldTestListUsingForeignKeyFieldNullable;
            }
        }
		
		[DataMember]
		private FieldTestList _fieldTestListUsingForeignKeyFieldNullable = null;
		
        /// <summary>
        /// Is FieldTestListUsingForeignKeyFieldNullable getable yet?
        /// </summary>
        public bool FieldTestListUsingForeignKeyFieldNullablePopulated
        {
            get { return _fieldTestListUsingForeignKeyFieldNullable != null; }
        }

        /// <summary>
        /// Populate FieldTestListUsingForeignKeyFieldNullable
        /// </summary>
        /// <param name="fieldTestList"></param>
        public void PopulateFieldTestListUsingForeignKeyFieldNullable(IEnumerable<FieldTest> fieldTestList)
        {
			if (fieldTestList == null)
				_fieldTestListUsingForeignKeyFieldNullable = new FieldTestList();
			else
				_fieldTestListUsingForeignKeyFieldNullable = new FieldTestList(fieldTestList);
        }
		
        /// <summary>
        /// Clear all items from FieldTestListUsingForeignKeyFieldNullable and mark as not populated anymore
        /// </summary>
        public void UnpopulateFieldTestListUsingForeignKeyFieldNullable()
        {
            _fieldTestListUsingForeignKeyFieldNullable = null;
        }
		#endregion
		
		#region Public Properties
			
		/// <summary>
		/// Public accessor for _id
		/// </summary>		
		public virtual int Id
		{
			get { return _id; }
		}
		
		/// <summary>
		/// Public accessor for _thingId
		/// </summary>		
		public virtual int ThingId
		{
			get { return _thingId; }
			set
			{
				if (_thingId != value && PropertyValueChanging("ThingId", value))
				{
					_thingId = value;
					PropertyValueChanged("ThingId");
				}
			}
		}
		
		/// <summary>
		/// Public accessor for _description
		/// </summary>		
		public virtual string Description
		{
			get { return _description; }
			set
			{
				if (value != null) 
				{
					value = value.Trim();
				}
			  
				if (_description != value && PropertyValueChanging("Description", value))
				{
					_description = value;
					PropertyValueChanged("Description");
				}
			}
		}
		
		#endregion
		
		#region Database Properties
			
		/// <summary>
		/// Database accessor for _id. Only used by IBatis.
		/// </summary>
		[SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
		internal int DbId
		{
			get { return _id;  }
			set { _id = value; }
		}

		/// <summary>
		/// Database accessor for _thingId. Only used by IBatis.
		/// </summary>
		[SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
		internal int DbThingId
		{
			get { return _thingId;  }
			set { _thingId = value; }
		}

		/// <summary>
		/// Database accessor for _description. Only used by IBatis.
		/// </summary>
		[SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
		internal string DbDescription
		{
			get { return _description;  }
			set { _description = value; }
		}

		#endregion
		
		
		
		#region IClonable Members
		
		/// <summary>
		///	Returns a copy of the instance of Widget
		/// </summary>
		/// <remarks>
		/// Overrides the base version, but calls OnClone to allow base classes chance
		/// to clone their information
		/// </remarks>
		public override object Clone()
        {
			// All of the value types are cloned using memberwise clone
			Widget clone = (Widget)this.MemberwiseClone();

			// Copy any other instances which are not known about by myGen
			OnClone(clone);
		
			// Return our pristine clone!
            return clone;
		}
		
		#endregion		
		
		#region Test Utilities
		
		/// <summary>
		/// Used for testing - allows stub objects to be created simply.  Ensure that
		/// the test assembly's name is added to AssemblyInfo (in your projects entities 
		/// dll - e.g. CT.Entities) inside an InternalsVisisbleToAttribute
		/// </summary>
		/// <param name="id">ID to use for test stub</param>
		internal virtual void SetId(int id)
		{
			_id = id;
			_isNew = false;
		}
		
		#endregion		
		
		/// <summary>
		/// Overriden method to get the Id of the entity
		/// </summary>
		public override int Identity
		{
			get { return _id; }
		}
	}

    /// <summary>
    /// Event args class for Widget
    /// </summary>
    public class WidgetEventArgs : EventArgs
    {
        public Widget Widget { get; private set; }

        public WidgetEventArgs(Widget widget)
        {
            Widget = widget;
        }
    }
}