/*****************************************************************************/
/***                                                                       ***/
/***    This is an automatically generated file. It is generated using     ***/
/***    MyGeneration in conjunction with IBatisBusinessObject template.    ***/
/***                                                                       ***/
/***    DO NOT MODIFY THIS FILE DIRECTLY!                                  ***/
/***                                                                       ***/
/***    If you need to make changes either modify the template and         ***/
/***    regenerate or derive a class from this class and override.         ***/
/***                                                                       ***/
/*****************************************************************************/

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Reflection;
using System.Runtime.Serialization;
using System.Linq;
using Microsoft.FSharp.Collections;

using PebbleCode.Framework.Collections;
using PebbleCode.Framework.Dates;
using PebbleCode.Framework.Utilities;
using PebbleCode.Entities;
using PebbleCode.ExpressionTree;

namespace PebbleCode.Tests.Entities
{
	/// <summary>
	///	Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public partial class Thing : Entity
	{
        /// <summary>
        /// Get the entity type
        /// </summary>
		public override Flags EntityFlag { get { return EntityType.Thing; } }
		
		#region Private Members
		[DataMember]
		private int _id;
		[DataMember]
		private string _name;
		[DataMember]
		private int? _corners;
		[DataMember]
		private int _edges;
		[DataMember]
		private int? _test;
		#endregion
		
		/// <summary>
        /// Constructor
		/// </summary>
		public Thing()
		{
			// Initialise database field values
			OnCreated();
		}
		
		
		#region Foreign Key Collections
				
        /// <summary>
        /// Get the associated WidgetList
        /// </summary>
        public WidgetList WidgetList
        {
            get 
            {
                if (_widgetList == null)
					if (IsNew)
						_widgetList = new WidgetList();
					else
						throw new InvalidOperationException("_widgetList not populated yet");
                return _widgetList;
            }
        }
		
		[DataMember]
		private WidgetList _widgetList = null;
		
        /// <summary>
        /// Is WidgetList getable yet?
        /// </summary>
        public bool WidgetListPopulated
        {
            get { return _widgetList != null; }
        }

        /// <summary>
        /// Populate WidgetList
        /// </summary>
        /// <param name="widgetList"></param>
        public void PopulateWidgetList(IEnumerable<Widget> widgetList)
        {
			if (widgetList == null)
				_widgetList = new WidgetList();
			else
				_widgetList = new WidgetList(widgetList);
        }
		
        /// <summary>
        /// Clear all items from WidgetList and mark as not populated anymore
        /// </summary>
        public void UnpopulateWidgetList()
        {
            _widgetList = null;
        }
		#endregion
		
		#region Public Properties
			
		/// <summary>
		/// Public accessor for _id
		/// </summary>		
		public virtual int Id
		{
			get { return _id; }
		}
		
		/// <summary>
		/// Public accessor for _name
		/// </summary>		
		public virtual string Name
		{
			get { return _name; }
			set
			{
				if (value != null) 
				{
					value = value.Trim();
				}
			  
				if (_name != value && PropertyValueChanging("Name", value))
				{
					_name = value;
					PropertyValueChanged("Name");
				}
			}
		}
		
		/// <summary>
		/// Public accessor for _corners
		/// </summary>		
		public virtual int? Corners
		{
			get { return _corners; }
			set
			{
				if (_corners != value && PropertyValueChanging("Corners", value))
				{
					_corners = value;
					PropertyValueChanged("Corners");
				}
			}
		}
		
		/// <summary>
		/// Public accessor for _edges
		/// </summary>		
		public virtual int Edges
		{
			get { return _edges; }
			set
			{
				if (_edges != value && PropertyValueChanging("Edges", value))
				{
					_edges = value;
					PropertyValueChanged("Edges");
				}
			}
		}
		
		/// <summary>
		/// Public accessor for _test
		/// </summary>		
		public virtual int? Test
		{
			get { return _test; }
			set
			{
				if (_test != value && PropertyValueChanging("Test", value))
				{
					_test = value;
					PropertyValueChanged("Test");
				}
			}
		}
		
		#endregion
		
		#region Database Properties
			
		/// <summary>
		/// Database accessor for _id. Only used by IBatis.
		/// </summary>
		[SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
		internal int DbId
		{
			get { return _id;  }
			set { _id = value; }
		}

		/// <summary>
		/// Database accessor for _name. Only used by IBatis.
		/// </summary>
		[SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
		internal string DbName
		{
			get { return _name;  }
			set { _name = value; }
		}

		/// <summary>
		/// Database accessor for _corners. Only used by IBatis.
		/// </summary>
		[SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
		internal int? DbCorners
		{
			get { return _corners;  }
			set { _corners = value; }
		}

		/// <summary>
		/// Database accessor for _edges. Only used by IBatis.
		/// </summary>
		[SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
		internal int DbEdges
		{
			get { return _edges;  }
			set { _edges = value; }
		}

		/// <summary>
		/// Database accessor for _test. Only used by IBatis.
		/// </summary>
		[SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
		internal int? DbTest
		{
			get { return _test;  }
			set { _test = value; }
		}

		#endregion
		
		
		
		#region IClonable Members
		
		/// <summary>
		///	Returns a copy of the instance of Thing
		/// </summary>
		/// <remarks>
		/// Overrides the base version, but calls OnClone to allow base classes chance
		/// to clone their information
		/// </remarks>
		public override object Clone()
        {
			// All of the value types are cloned using memberwise clone
			Thing clone = (Thing)this.MemberwiseClone();

			// Copy any other instances which are not known about by myGen
			OnClone(clone);
		
			// Return our pristine clone!
            return clone;
		}
		
		#endregion		
		
		#region Test Utilities
		
		/// <summary>
		/// Used for testing - allows stub objects to be created simply.  Ensure that
		/// the test assembly's name is added to AssemblyInfo (in your projects entities 
		/// dll - e.g. CT.Entities) inside an InternalsVisisbleToAttribute
		/// </summary>
		/// <param name="id">ID to use for test stub</param>
		internal virtual void SetId(int id)
		{
			_id = id;
			_isNew = false;
		}
		
		#endregion		
		
		/// <summary>
		/// Overriden method to get the Id of the entity
		/// </summary>
		public override int Identity
		{
			get { return _id; }
		}
	}

    /// <summary>
    /// Event args class for Thing
    /// </summary>
    public class ThingEventArgs : EventArgs
    {
        public Thing Thing { get; private set; }

        public ThingEventArgs(Thing thing)
        {
            Thing = thing;
        }
    }
}