##|TYPE Template
##|UNIQUEID 6e67a9a6-def5-4fc9-82e2-a366b912db1f
##|TITLE PHP Stored Proc Wrapper
##|NAMESPACE PHP
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE PHP
##|GUI_ENGINE .Net Script
##|GUI_LANGUAGE C#
##|GUI_BEGIN

public class GeneratedGui : DotNetScriptGui
{
	public GeneratedGui(ZeusContext context) : base(context) {}

	//-----------------------------------------
	// The User Interface Entry Point
	//-----------------------------------------
	public override void Setup()
	{
		ui.Width  = 600;
		ui.Height = 500;
		ui.ShowGui = true;
		
		// Setup Database selection combobox.
		ui.AddLabel( "databaseNameLabel", "Select a database:", "Select a database in the dropdown below." );
		GuiComboBox databaseName = ui.AddComboBox( "databaseName", "Select a database." );
		
		if( MyMeta.IsConnected )
		{
			databaseName.BindData( MyMeta.Databases );
			if( MyMeta.DefaultDatabase != null ) 
			{
				databaseName.SelectedValue = MyMeta.DefaultDatabase.Alias;
			}
		}
		
		// Grab default output path
		string defaultOutputPath = "";
		if( input.Contains( "defaultOutputPath" ) ) 
			defaultOutputPath = input["defaultOutputPath"].ToString();
		defaultOutputPath = System.IO.Path.Combine(defaultOutputPath, "db.cs");

		// Set up output file picker
		ui.AddLabel( "outputFileClassLabel", "Class File:", "Select an output file");
		GuiTextBox outputClassFile = ui.AddTextBox( "outputClassFile", defaultOutputPath, "Select an output file" );
		GuiFilePicker outputClassFilePicker = ui.AddFilePicker("outputClassFilePicker", "...", "Select a class output file", "outputClassFile", false);

		// Set up sp names
		ui.AddLabel( "spPrefixesLabel", "Enter ; separated sp prefixes to process:", "Enter ; separated sp prefixes to process");
		GuiTextBox namespaceTextBox = ui.AddTextBox( "spPrefixes", "sp_engine;sp_sched;sp_utility", "Enter sp prefixes to process" );
	}

}
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE .Net Script
##|BODY_LANGUAGE C#
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%#NAMESPACE System.IO, System.Text, System.Text.RegularExpressions, System.Globalization, System.Collections.Generic%><%
public class GeneratedTemplate : DotNetScriptTemplate
{
	public GeneratedTemplate(ZeusContext context) : base(context) {}

	private List<string> _prefixesToProcess = new List<string>();
	
	// Define like this so that it doesn't cause bad formatting in editor.
	// No other reason.
	private string _phpOpenTag = "<" + "?php";
	private string _phpCloseTag = "?>";
	
	//---------------------------------------------------
	// Render() is where you want to write your logic    
	//---------------------------------------------------
	public override void Render()
	{
		// Gather inputs
		string databaseName = input["databaseName"].ToString();
		string outputClassFile = input["outputClassFile"].ToString();
		string spPrefixes = input["spPrefixes"].ToString();

		// Process prefixes
		string[] spPrefixesArray = spPrefixes.Split(new char[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
		foreach (string spPrefix in spPrefixesArray)
			_prefixesToProcess.Add(spPrefix.Trim()); 

		// Output class
		OutputClassFile(databaseName);
		output.save(outputClassFile, false);
	}
	
	private void OutputClassFile(string databaseName)
	{

%><%= _phpOpenTag %>
/*****************************************************************
/*
/*   IMPORTANT!!!
/*
/*   DO NOT MODIFY THIS FILE DIRECTLY!
/*
/*   If you need to make changes either modify the template and
/*   regenerate or derive a class from this class and override.
/*
/*   Generation Date/Time: <%= DateTime.Now.ToString("dd/MM/yyyy HH:mm") %>
*/

include_once("DataStoreBase.php");

/**
/* Data Store encapsulation class
*/
class MySqlDataStore extends DataStoreBase
{
    /**
	/* Constructor
	*/
    public function __construct()
    {
        // Call parent
        parent::__construct();
        $this->DbDebug("MySqlDataStore Constructed");
    }<%
		
		// Loop over stored procs
		// And create a static method for each one
		IDatabase db = MyMeta.Databases[databaseName];
		foreach(IProcedure procedure in db.Procedures)
		{
			if (Skip(procedure))
				continue;
			
			// Find out basic info about the proc
			string methodName = GetMethodName(procedure.Name);
			bool outputResultSet = OutputResultSet(procedure);
			List<IParameter> outputs = GetOutputs(procedure);
			List<IParameter> inputs = GetInputs(procedure, outputs.Count, outputResultSet);

			// Build the method definition
			string[] inputParamDefinitions = new string[inputs.Count];
			string[] inputParamHelp = new string[inputs.Count];
			int inputParamsIndex = 0;
			foreach(IParameter inputParam in inputs)
			{
				string varName = ParamToVarName(inputParam);
				string paramDefinition = "";
				string paramHelp = string.Format("@param  {0}  [{1}]  ", inputParam.LanguageType, varName);
				
				switch (inputParam.Direction)
				{
					case ParamDirection.InputOutput:
						throw new NotSupportedException("InOut params not supported for mysql/php");

					case ParamDirection.Input:
						paramDefinition = varName;
						paramHelp += "Input param.";
						break;
						
					case ParamDirection.Output:
						paramDefinition = "&" + varName;
						paramHelp += "Output param. Passed by reference and updated in function.";
						break;
				}
				
				inputParamDefinitions[inputParamsIndex] = paramDefinition;
				inputParamHelp[inputParamsIndex++] = paramHelp;
			}				

			// Write out the method header
%>
    /**
    /* Wrapper method for <%= procedure.Name %> stored proc<%
	if (inputParamHelp.Length > 0)
	{%>
	/* <%
		foreach (string paramHelp in inputParamHelp)
		{%>
	/* <%= paramHelp %><%
		}
	}
	
	if (outputResultSet)
	{%>
	/* 
	/* @return  Array  Result set from stored procedure, as an array of objects. Each 
	/* object represents a row and has a property for each field in the result set.<%
	}
	else if (outputs.Count == 1)
	{%>
	/* 
	/* @return  <%= outputs[0].LanguageType %>  Simple output from stored procedure<%
	}
	%>
	*/
	public function <%= methodName %>(<%= string.Join(", ", inputParamDefinitions) %>)
	{
		// Open a connection to the db
		$connection = $this->GetConnection();
		
<%  
			// Build information for calling stored proc and binding params into it
			List<string> bindParamTypes = new List<string>();
			List<string> bindParamVars = new List<string>();
			List<string> statementPlaceholders = new List<string>();
			
			foreach(IParameter parameter in procedure.Parameters)
			{
				if (parameter.Direction == ParamDirection.InputOutput)
					throw new NotSupportedException("InOut params not supported for mysql/php");
				else if (parameter.Direction == ParamDirection.Output)
					statementPlaceholders.Add(ParamToQueryVarName(parameter));
				else  // Must be input
				{
					statementPlaceholders.Add("?");
					bindParamTypes.Add(ParamToMySqliType(parameter));
					bindParamVars.Add(ParamToVarName(parameter));
				}
			}
			
			// Convert string arrays to strings
			string bindParamTypesString = string.Join("", bindParamTypes.ToArray());
			string bindParamVarsString = string.Join(", ", bindParamVars.ToArray());
			string statementPlaceholdersString = string.Join(", ", statementPlaceholders.ToArray());
%>
		// Create a command to fire the stored proc
        $statement = "CALL <%= procedure.Name %>(<%= statementPlaceholdersString %>)";
        $this->DbDebug("Executing: " . $statement);
        $command = $connection->prepare($statement);
        if ($command == false)
            $this->HandleError("Error preparing statement");

		// Run the command<% 
		
			if (procedure.Parameters.Count > 0)
			{%>		
		$command->bind_param("<%= bindParamTypesString %>", <%= bindParamVarsString %>);
<%
			}%>
        if (!$command->execute())
        {
            $this->DbDebug("Error executing statement:");
            $this->CheckForDbError($connection);		
        }<%
			
			// Process output result set
			if (outputResultSet)
			{%>
			
        // Grab results
        $resultArray = $this->BuildResultClasses($command);
        $this->DbDebug(count($resultArray) . " results converted to classes");
        $this->DbDebugArray($resultArray);
		
		// Clean up the command<%
		}%>
		$command->close();<%
			
			// Gather out params
			foreach (IParameter parameter in outputs)
			{
				string varName = ParamToVarName(parameter);%>

		// Gather out params: <%= varName %>
		<%= varName %>Result = $connection->query("SELECT <%= ParamToQueryVarName(parameter) %>");
        <%= varName %>Array = <%= varName %>Result->fetch_row();
        <%= varName %> = <%= varName %>Array[0];
        <%= varName %>Result->free();<%
			}%>
			
        // Clean up connection
        $connection->close();
        $connection = null;<%
			
			// Outputting result set?
			if (outputResultSet)
			{%>

		// Return the result set objects
		return $resultArray;<%
			}
			
			// If its just one result, return it now
			else if (outputs.Count == 1)
			{%>

		// Return the only result
		return <%= ParamToVarName(outputs[0]) %>;<%
			}			
			%>
	}
<%
		}

%>}
<%
	}
	
	/// Method to see if the procedure has any meta data that
	/// dictates we should output an entity
	private bool OutputResultSet(IProcedure procedure)
	{
		return procedure.Properties.ContainsKey("outputResultSet");
	}
	
	/// Method to see if we should skip certain procs
	private bool Skip(IProcedure procedure)
	{
		foreach (string prefixToProcess in _prefixesToProcess)
		{
			if (procedure.Name.StartsWith(prefixToProcess))
				return false;
		}
		return true;
	}
	
	/// Get all of the outputs a proc has
	private List<IParameter> GetOutputs(IProcedure procedure)
	{
		List<IParameter> outputs = new List<IParameter>();
		foreach(IParameter parameter in procedure.Parameters)
		{
			if (parameter.Direction == ParamDirection.Output || parameter.Direction == ParamDirection.InputOutput)
				outputs.Add(parameter);
		}
		return outputs;
	}
	
	/// Get all of the inputs a proc has
	private List<IParameter> GetInputs(IProcedure procedure, int outputCount, bool outputResultSet)
	{
		List<IParameter> inputs = new List<IParameter>();
		foreach(IParameter parameter in procedure.Parameters)
		{
			if (parameter.Direction == ParamDirection.Input ||
				parameter.Direction == ParamDirection.InputOutput ||
				(parameter.Direction == ParamDirection.Output && (outputCount > 1 || outputResultSet)))
			{
				inputs.Add(parameter);
			}
		}
		return inputs;
	}
	
	/// Create a MySqli type for a given parameter
	private string ParamToMySqliType(IParameter parameter)
	{
		switch (parameter.LanguageType)
		{
			case "int": return "i";
			case "double": return "d";
			case "string": return "s";
			case "DateTime": return "s";
			default: return "b";
		}
	}
	
	/// Create a variable name for a given parameter
	private string ParamToVarName(IParameter parameter)
	{
		return "$" + ParamToCamelisedName(parameter);
	}
	
	/// Create a variable name for a given parameter
	private string ParamToQueryVarName(IParameter parameter)
	{
		return "@" + ParamToCamelisedName(parameter);
	}
	
	/// Create a variable name for a given parameter
	private string ParamToCamelisedName(IParameter parameter)
	{
		string paramName = parameter.Name;
		if (paramName.StartsWith("p_") || paramName.StartsWith("v_"))
			paramName = paramName.Substring(2);
		return StripUnderscoresAndCapitalise(paramName, true);
	}
	
	/// Method to convert a proc name into a method name
	private string GetMethodName(string procedureName)
	{
		// Strip prefix from beginning
		foreach (string prefix in _prefixesToProcess)
		{
			if (procedureName.StartsWith(prefix))
			{
				procedureName = procedureName.Substring(prefix.Length, procedureName.Length - prefix.Length);
				break;
			}
		}
		
		// Strip out underscores and capitalise, including first part
		return StripUnderscoresAndCapitalise(procedureName, false);
	}
	
	/// Method split names on underscore and capitalise each word
	/// Camelise == true; to not capitalise the first word
	private string StripUnderscoresAndCapitalise(string source, bool camelise)
	{
		bool isFirst = true;
		string result = "";
		
		// Split on _
		string[] parts = source.Split(new string[] {"_"}, StringSplitOptions.RemoveEmptyEntries);
		foreach (string part in parts)
		{
			if (isFirst && camelise)
			{
				result += part.ToLower();
			}
			else
			{
				result += part.Substring(0, 1).ToUpper();
				if (part.Length > 1)
					result += part.Substring(1, part.Length - 1).ToLower();
			}
			isFirst = false;
		}
		
		return result;
	}
}
%>
##|BODY_END
