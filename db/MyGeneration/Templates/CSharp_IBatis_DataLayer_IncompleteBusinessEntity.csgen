##|TYPE Template
##|UNIQUEID 56a5de17-0b2c-4fb8-bbf6-cf2a73d6f664
##|TITLE IncompleteBusinessEntity
##|NAMESPACE IBatis.DataLayer
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE None
##|GUI_ENGINE .Net Script
##|GUI_LANGUAGE C#
##|GUI_BEGIN

public class GeneratedGui : DotNetScriptGui
{
	public GeneratedGui(ZeusContext context) : base(context) {}

	//-----------------------------------------
	// The User Interface Entry Point
	//-----------------------------------------
	public override void Setup()
	{
		// ** UNCOMMENT CODE BELOW TO SEE UI **

		//ui.Width  = 100;
		//ui.Height = 100;
		//GuiLabel lblDemo = ui.AddLabel("lblDemo", "Demo", "Demo Tooltip");
		//ui.ShowGui = true;
	}

}
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE .Net Script
##|BODY_LANGUAGE C#
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%#NAMESPACE System.IO, System.Text, System.Text.RegularExpressions, System.Globalization, System.Collections.Generic%><%
public class GeneratedTemplate : DotNetScriptTemplate
{
	%><%#FILE CSharp_IBatis_DataLayer_Common.cs%><%
	
	// Constructor
	public GeneratedTemplate(ZeusContext context) : base(context) {}

	//---------------------------------------------------
	// Render() is where you want to write your logic    
	//---------------------------------------------------
	public override void Render()
	{
		// Call a method defined in IBatis_Boardbooks_Common.cs
		AssignMemberVariables();

		// Now output the template
%>/*****************************************************************************/
/***                                                                       ***/
/***    This is an automatically generated file. It is generated using     ***/
/***    MyGeneration in conjunction with IBatisBusinessObject template.    ***/
/***                                                                       ***/
/***    DO NOT MODIFY THIS FILE DIRECTLY!                                  ***/
/***                                                                       ***/
/***    If you need to make changes either modify the template and         ***/
/***    regenerate or derive a class from this class and override.         ***/
/***                                                                       ***/
/*****************************************************************************/

using System;
using System.Diagnostics.CodeAnalysis;

using <%= _rootNamespace %>.Framework;

namespace <%= _entityNamespace %>
{
	/// <summary>
	/// Generated by MyGeneration using the IBatis Object Mapping template
	/// </summary>
	[Serializable]
	public partial class Incomplete<%= _className %> : <%= _className %>
	{
		#region Private Members
<% 		foreach( IColumn field in _columns )
		{
			if (SkipColumn(field))
				continue;
%>
		private bool <%= ColumnToIsAvailableMemberName(field) %>;<%
		}%>
		
		#endregion
		
		/// <summary>
		/// constructor
		/// </summary>
		public Incomplete<%= _className %>()
		{
		}
		
		/// <summary>
		/// Copy all available data from this incomplete class onto a target class
		/// </summary>
        /// <param name="target"></param>
		public void CopyAvailableData(<%= _className %> target)
		{<% 		
		foreach( IColumn field in _columns )
		{
			if (SkipColumn(field))
				continue;
				
			string fieldAccessor = ColumnToPropertyName( field );%>
			if (<%= ColumnToIsAvailableMemberName(field) %>) target.<%= fieldAccessor %> = this.<%= fieldAccessor %>;<%
		}%>
		}
		
		#region Public Properties
		<% 
		foreach( IColumn field in _columns )
		{
			if (SkipColumn(field))
				continue;
				
			string fieldAccessor = ColumnToPropertyName( field );
			string fieldName = ColumnToMemberVariable( field );
			string isSetFieldName = ColumnToIsAvailableMemberName (field);
			string fieldType = ColumnToMemberType( field );				
			
			%>
		/// <summary>
		/// Public accessor for <%= fieldName %>
		/// </summary>
		public override <%= fieldType %> <%= fieldAccessor %>
		{
			get 
			{ 
				if (<%= isSetFieldName %>)
					return (base.<%= fieldAccessor %>);
				else
					throw new InvalidOperationException("<%= fieldName %> not available");
			}
			set
			{
				<%= isSetFieldName %> = true;
				base.<%= fieldAccessor %> = value;
			}
		}
		
		/// <summary>
		/// Check to see if <%= ColumnToPropertyName( field ) %> has been set yet
		/// </summary>
		public bool <%= ColumnToIsAvailablePropertyName( field ) %>
		{
			get { return <%= ColumnToIsAvailableMemberName (field) %>; }
		}
		<%
		} // foreach
		%>
		#endregion
	}
}<%
	}
	
	private bool SkipColumn(IColumn column)
	{
		return (
			IsExcluded(column)
			|| (_isVersioned && IsVersionField(column))
			|| (column == _pk));
	}
	
	private string ColumnToIsAvailableMemberName(IColumn column)
	{
		string memberName = ColumnToMemberVariable( column );
		return "_is" + 
			memberName[1].ToString().ToUpper()[0] +
			memberName.Substring(2) + 
			"Available";
	}
	
	private string ColumnToIsAvailablePropertyName(IColumn column)
	{
		return "Is" + ColumnToPropertyName( column ) + "Available";
	}
}
%>
##|BODY_END
