##|TYPE Template
##|UNIQUEID a6bc85c2-1b98-48dd-9b7b-14a6dfa60db9
##|TITLE MappingFile
##|NAMESPACE IBatis.DataLayer
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE None
##|GUI_ENGINE .Net Script
##|GUI_LANGUAGE C#
##|GUI_BEGIN

public class GeneratedGui : DotNetScriptGui
{
	public GeneratedGui(ZeusContext context) : base(context) {}

	//-----------------------------------------
	// The User Interface Entry Point
	//-----------------------------------------
	public override void Setup()
	{
		// ** UNCOMMENT CODE BELOW TO SEE UI **

		//ui.Width  = 100;
		//ui.Height = 100;
		//GuiLabel lblDemo = ui.AddLabel("lblDemo", "Demo", "Demo Tooltip");
		//ui.ShowGui = true;
	}

}
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE .Net Script
##|BODY_LANGUAGE C#
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%#NAMESPACE System.IO, System.Text, System.Text.RegularExpressions, System.Globalization, System.Collections.Generic%><%
// $Id: IBatis_Boardbooks_MappingFile.csgen,v 1.3 2007/05/10 23:57:34 morciuch Exp $
public class GeneratedTemplate : DotNetScriptTemplate
{
	%><%#FILE CSharp_IBatis_DataLayer_Common.cs%><%
	
	// Constructor
	public GeneratedTemplate(ZeusContext context) : base(context) {}

	//---------------------------------------------------
	// Render() is where you want to write your logic    
	//---------------------------------------------------
	public override void Render()
	{
		bool isFirst;
		
		// Call a method defined in IBatis_Boardbooks_Common.cs
		AssignMemberVariables();

		// No columns, no output
		if( _columns.Count == 0 )
			return;
			
		// Write out the file content

%><?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="<%= _className %>" xmlns="http://ibatis.apache.org/mapping" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

	<alias>
		<typeAlias alias="<%= _className %>" type="<%= _entityNamespace %>.<%= _className %>, <%= _assemblyName %>" />
		<typeAlias alias="<%= _listClassName %>" type="<%= _entityNamespace %>.<%= _listClassName %>, <%= _assemblyName %>" />
	</alias>
			
	<resultMaps>
		<resultMap id="<%= _className %>Result" class="<%= _className %>"><%
		foreach( IColumn c in _columns )
		{
			if ( IsExcluded(c) ) continue;

			// some types have to be handled separately...
			if (c.DataTypeName.ToLower() == "image" 
				|| c.DataTypeName.ToLower() == "binary" 
				|| c.DataTypeName.ToLower() == "varbinary"
				|| c.DataTypeName.ToLower() == "tinyblob"
				|| c.DataTypeName.ToLower() == "blob"
				|| c.DataTypeName.ToLower() == "mediumblob"
				|| c.DataTypeName.ToLower() == "longblob")
			{%>
			<result property="<%= ColumnToDbPropertyName(c) %>" column="<%= c.Name %>"/><%
			}
			// Standard columns
			else
			{%>
			<result property="<%= ColumnToDbPropertyName(c) %>" column="<%= c.Name %>" type="<%= CLRTypeToIBatisType(c) %>" dbType="<%= CLRTypeToDbType(c) %>"/><%
			}
		}%>
		</resultMap>
	</resultMaps>

	<statements>
		
		<!-- Reusable fragment for select all columns in the table -->
		<sql id="<%= _className %>ColumnNamesFragment"><%
		// Add column names
		isFirst = true;
		foreach( IColumn column in _columns )
		{
			if ( IsExcluded(column) ) continue;
			
			if (!isFirst){%>,<% }
			isFirst = false;
			%>
			<%= _tableName %>.<%= column.Name %><%
		}
			%>
		</sql>
	
		<!-- Select entity by primary key -->
		<select id="Select<%= _className %>" parameterClass="<%= CLRTypeToIBatisType(_pk) %>" listClass="<%= _listClassName %>" resultMap="<%= _className %>Result">
			SELECT
				<include refid="<%= _className %>ColumnNamesFragment"/>
			FROM
				<%= _tableName %>
			<dynamic prepend="WHERE">
				<isParameterPresent><%= _pk.Name %> = #value#</isParameterPresent>
			</dynamic>
		</select>

		<!-- Select entities by primary key -->
		<select id="Select<%= _className %>s" parameterClass="list" listClass="<%= _listClassName %>" resultMap="<%= _className %>Result">
			SELECT
				<include refid="<%= _className %>ColumnNamesFragment"/>
			FROM
				<%= _tableName %>
			WHERE
				<%= _pk.Name %> IN
				<iterate open="(" close=")" conjunction=", ">
				  #[]#
				</iterate>
		</select>
<%
		// Add extra look ups for unique index columns
		foreach(IIndex index in GetUniqueIndexes())
		{
			%>
		<!-- Select entity by <%= index.Alias %> -->
		<select id="Select<%= _className %>By<%= index.Alias %>" parameterClass="map" listClass="<%= _listClassName %>" resultMap="<%= _className %>Result">
			SELECT
				<include refid="<%= _className %>ColumnNamesFragment"/>
			FROM
				<%= _tableName %>
			WHERE<%
			isFirst=true;
			foreach(IColumn column in index.Columns)
			{
				if (!isFirst)
				{%>
				AND<%
				}
			%>
				<%= column.Name %> = #<%= ToPascalCase(column.Name) %>#<%
				isFirst = false;
			}
			%>
		</select>
		<%
		}
		
		// Add extra look ups for foreign key columns
		foreach(IForeignKey foreignKey in GetNonPrimaryForeignKeys())
		{
			WriteLookUp(foreignKey.ForeignColumns[0]);
		}
		
		// And looks ups for any column with a look up property
		foreach (IColumn column in _columns)
		{
			if (!column.Properties.ContainsKey("lookUp"))
				continue;
			WriteLookUp(column);
		}
		
		// Add any multi column look ups
		Dictionary<string, List<LookupColumnInfo>> multiColumnLookUps = GetMultiColumnListLookUps();
		foreach (string key in multiColumnLookUps.Keys)
			WriteLookUp(key, multiColumnLookUps[key]);

		multiColumnLookUps = GetMultiColumnEntityLookUps();
		foreach (string key in multiColumnLookUps.Keys)
			WriteLookUp(key, multiColumnLookUps[key]);
			
		%>

		<!-- Does entity exist? -->
		<select id="Does<%= _className %>Exist" parameterClass="<%= _pk.LanguageType %>" resultClass="bool">
			SELECT
				1
			FROM
				<%= _tableName %>
			WHERE
				<%= _pk.Name %> = #value#
		</select>

<%		if (!_doingSummary)
		{   
			IColumn autoPk = GetAutoIncrementKey(_columns);
%>		<insert id="Insert<%= _className %>" parameterClass="<%= _className %>">
			INSERT INTO
				<%= _tableName %>
				(<% 

			// Output each column name
			isFirst = true;
			foreach( IColumn c in _columns )
			{
				if ( IsExcluded(c) ) continue;
				if ( IsVersionField(c) ) continue;
				
				if (!c.Equals(autoPk))
				{
					if (!isFirst) { %>,<% }
					isFirst = false;%>
					<%= c.Name %><%
				}
			}%>
				)
			VALUES
				(<%
				
			// Output each column value
			isFirst = true;
			foreach( IColumn c in _columns )
			{
				if ( IsExcluded(c) ) continue;
				if ( IsVersionField(c) ) continue;
				
				if (!c.Equals(autoPk))
				{
					if (!isFirst) { %>,<% }
					isFirst = false;
					
					string dbTypeSuffix = "";
					if (c.LanguageType.Equals("DateTime"))
						dbTypeSuffix = ":DateTime:1/1/0001 12:00:00 AM";
					else if (c.DataTypeName == "image")
						dbTypeSuffix = ",dbType=Image";
					else if (c.DataTypeName == "binary")
						dbTypeSuffix = ",dbType=Binary";
					else if (c.DataTypeName == "varbinary")
						dbTypeSuffix = ",dbType=VarBinary";
					
					%>
					#<%= ColumnToDbPropertyName(c) %><%= dbTypeSuffix %>#<%
				}
			}				
				
			%>
				)<% 
		
		// Get the primary key back, after the insert
		if (_pk != null && _pk.IsAutoKey)
		{%>
			<selectKey resultClass="<%= ColumnToVariableType(_pk) %>" type="post" property="<%= ColumnToDbPropertyName(_pk) %>">
				SELECT @@IDENTITY as value
			</selectKey><%
		}%>
		</insert>
		
		<update id="Update<%= _className %>" parameterClass="<%= _className %>">
			UPDATE
				<%= _tableName %>
			SET<% 		
			isFirst = true;
			foreach(IColumn c in _columns)
			{
				if ( IsExcluded(c) ) continue;
				if ( IsVersionField(c) ) continue;
				if (c.Equals(_pk)) continue;

				if (!isFirst) { %>,<% }
				isFirst = false;

				string dbTypeSuffix = "";
				if (c.DataTypeName == "image")
					dbTypeSuffix = ",dbType=Image";
				else if (c.DataTypeName == "binary")
					dbTypeSuffix = ",dbType=Binary";
				else if (c.DataTypeName == "varbinary")
					dbTypeSuffix = ",dbType=VarBinary";
				
				%>
				<%= c.Name %>=#<%= ColumnToDbPropertyName(c) %><%= dbTypeSuffix %>#<%
			}
			
			if (_isVersioned)
			{%>,
				<%= _versionColumnName %>=<%= _versionColumnName %>+1<%
			}%>
			WHERE
				<%= _pk.Name %>=#<%= ColumnToDbPropertyName(_pk) %>#<%
			
			if (_isVersioned)
			{%>
				AND
				<%= _versionColumnName %>=#<%= ToDbPropertyName(_versionColumnName) %>#<%
			}

		
		%>
		</update>
	
<%			if (_isVersioned) 
			{  %>
		<!-- Select version info query -->
		<select id="Select<%= _className %>VersionInfo" parameterClass="<%= CLRTypeToIBatisType(_pk) %>" resultMap="Entity.VersionedEntityInfoResult">
			SELECT
				<%= _versionColumnName %>,
				<%= _timestampColumnName %>
			FROM
				<%= _tableName %>
			WHERE
				<%= _pk.Name %> = #value#
		</select>
		
		<!-- Select timestamp query -->
		<select id="SelectLatest<%= _className %>Timestamp">
			SELECT
				Max(<%= _timestampColumnName %>)
			FROM
				<%= _tableName %>
		</select>

		<!-- Versioned delete -->
		<delete id="Delete<%= _className %>" parameterClass="VersionedEntity">
			DELETE FROM
				<%= _tableName %>
			WHERE
				<%= _pk.Name %> = #Identity#
				AND
				<%= _versionColumnName %> = #<%= ToDbPropertyName(_versionColumnName) %>#
		</delete>
		<%
			} 
			else
			{
			%>
		<delete id="Delete<%= _className %>" parameterClass="<%= _pk.LanguageType %>">
			DELETE FROM
				<%= _tableName %>
			WHERE
				<%= _pk.Name %> = #value#
		</delete>
			<%
			}
			%>	

		<!-- Delete ALL -->
		<delete id="DeleteAll<%= _className %>">
			DELETE FROM <%= _tableName %> <%= GetDeleteAllOrderBy() %>
		</delete>
<%			
		} // if (!_doingSummary)
%>
	</statements>

</sqlMap>
<%
		
	}
	
	private void WriteLookUp(IColumn lookUpColumn)
	{
		foreach(ResultMap resultMap in GetResultMaps(lookUpColumn))
		{
	%>
		<!-- Select entities by <%= ToVariableName(lookUpColumn.Name) %> -->
		<select id="Select<%= resultMap.Id %>" parameterClass="<%= ColumnToDbPropertyType(lookUpColumn) %>" listClass="<%= _listClassName %>" resultMap="<%= resultMap.Name %>">
			SELECT
				<include refid="<%= _className %>ColumnNamesFragment"/>
			FROM
				<%= _tableName %>
			WHERE
				<dynamic>
				  <isParameterPresent><%= lookUpColumn.Name %> = #value#</isParameterPresent>
				  <isNotParameterPresent><%= lookUpColumn.Name %> IS NULL</isNotParameterPresent>
				</dynamic>
		</select>
		
		<!-- Select entities by multiple <%= ToVariableName(lookUpColumn.Name) %> -->
		<select id="Select<%= resultMap.Id %>s" parameterClass="list" listClass="<%= _listClassName %>" resultMap="<%= resultMap.Name %>">
			SELECT
				<include refid="<%= _className %>ColumnNamesFragment"/>
			FROM
				<%= _tableName %>
			WHERE
				<%= lookUpColumn.Name %> IN
				<iterate open="(" close=")" conjunction=", ">
				  #[]#
				</iterate>
		</select>

<% 		} %>

		<!-- Delete entities by <%= ToVariableName(lookUpColumn.Name) %> -->
		<delete id="Delete<%= _className %>By<%= ToPascalCase(lookUpColumn.Name) %>" parameterClass="<%= ColumnToDbPropertyType(lookUpColumn) %>">
			DELETE
			FROM
				<%= _tableName %>
			WHERE
				<dynamic>
				  <isParameterPresent><%= lookUpColumn.Name %> = #value#</isParameterPresent>
				  <isNotParameterPresent><%= lookUpColumn.Name %> IS NULL</isNotParameterPresent>
				</dynamic>
		</delete>
		
		<!-- Delete entities by multiple <%= ToVariableName(lookUpColumn.Name) %> -->
		<delete id="Delete<%= _className %>By<%= ToPascalCase(lookUpColumn.Name) %>s" parameterClass="list">
			DELETE
			FROM
				<%= _tableName %>
			WHERE
				<%= lookUpColumn.Name %> IN
				<iterate open="(" close=")" conjunction=", ">
				  #[]#
				</iterate>
		</delete>
		<%
	}
	
	private void WriteLookUp(string name, List<LookupColumnInfo> lookUpColumns)
	{
		foreach(ResultMap resultMap in GetResultMaps(name))
		{
	%>
		<!-- Select entities by multiple columns -->
		<select id="Select<%= resultMap.Id %>" parameterClass="map" listClass="<%= _listClassName %>" resultMap="<%= resultMap.Name %>">
			SELECT
				<include refid="<%= _className %>ColumnNamesFragment"/>
			FROM
				<%= _tableName %>
			<dynamic prepend="where"><%
			foreach (LookupColumnInfo lookUpColumnInfo in lookUpColumns)
			{
				IColumn lookUpColumn = lookUpColumnInfo.Column; 
			%>
				<isNotNull property="<%= ToVariableName(lookUpColumn.Name) %>" prepend ="AND"><%= lookUpColumn.Name %> <%= lookUpColumnInfo.XmlSafeComparison %> #<%= ToVariableName(lookUpColumn.Name) %>#</isNotNull>
				<isNull property="<%= ToVariableName(lookUpColumn.Name) %>" prepend ="AND"><%= lookUpColumn.Name %> IS NULL</isNull><%
			}%>
			</dynamic>
		</select>

<% 		} %>

		<!-- Delete entities by multiple columns -->
		<delete id="Delete<%= _className %><%= name %>" parameterClass="map">
			DELETE
			FROM
				<%= _tableName %>
			<dynamic prepend="where"><%
			foreach (LookupColumnInfo lookUpColumnInfo in lookUpColumns)
			{
				IColumn lookUpColumn = lookUpColumnInfo.Column; 
			%>
				<isNotNull property="<%= ToVariableName(lookUpColumn.Name) %>" prepend ="AND"><%= lookUpColumn.Name %> <%= lookUpColumnInfo.XmlSafeComparison %> #<%= ToVariableName(lookUpColumn.Name) %>#</isNotNull>
				<isNull property="<%= ToVariableName(lookUpColumn.Name) %>" prepend ="AND"><%= lookUpColumn.Name %> IS NULL</isNull><%
			}%>
			</dynamic>
		</delete>
		<%
	}

	private string CLRTypeToIBatisType( IColumn Column )
	{
		switch( Column.LanguageType )
		{
			case "numeric": 
			case "float":
				return "single";
			case "byte[]":
				return "Byte";
		}
		
		return Column.LanguageType;
	}
	
	private string CLRTypeToDbType( IColumn Column )
	{
		switch( Column.LanguageType )
		{
			case "Byte[]":
			case "byte[]":			
				return "Binary";

			case "Boolean":
				return "Bit";

			case "Byte":
				return "TinyInt";

			case "float":
			case "numeric":
			case "double":
			case "single":
				return "Real";

			case "int":
			case "Int32":
			case "UInt16":
				return "Int";

			case "Int16":
				return "SmallInt";

			case "Int64":
				return "BigInt";

			case "string":
				return "varchar";

			case "UInt32":
				return "Decimal";
		}
		
		return Column.LanguageType;
	}

	private IColumn GetAutoIncrementKey(IColumns Columns)
	{
		foreach(IColumn c in Columns)
			if (c.IsInPrimaryKey && c.IsAutoKey) return c;			
		return null;
	}
}
%>
##|BODY_END
