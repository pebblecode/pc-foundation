##|TYPE Template
##|UNIQUEID bce1ad17-20c7-4eff-860e-1b37d796bef1
##|TITLE BusinessEntityCollection
##|NAMESPACE IBatis.DataLayer
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE None
##|GUI_ENGINE .Net Script
##|GUI_LANGUAGE C#
##|GUI_BEGIN

public class GeneratedGui : DotNetScriptGui
{
	public GeneratedGui(ZeusContext context) : base(context) {}

	//-----------------------------------------
	// The User Interface Entry Point
	//-----------------------------------------
	public override void Setup()
	{
		// ** UNCOMMENT CODE BELOW TO SEE UI **

		//ui.Width  = 100;
		//ui.Height = 100;
		//GuiLabel lblDemo = ui.AddLabel("lblDemo", "Demo", "Demo Tooltip");
		//ui.ShowGui = true;
	}

}
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE .Net Script
##|BODY_LANGUAGE C#
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%#NAMESPACE System.IO, System.Text, System.Text.RegularExpressions, System.Globalization, System.Collections.Generic%><%
public class GeneratedTemplate : DotNetScriptTemplate
{
	%><%#FILE CSharp_IBatis_DataLayer_Common.cs%><%
	
	// Constructor
	public GeneratedTemplate(ZeusContext context) : base(context) {}

	//---------------------------------------------------
	// Render() is where you want to write your logic    
	//---------------------------------------------------
	public override void Render()
	{
		// Call a method defined in IBatis_Boardbooks_Common.cs
		AssignMemberVariables();
		string _listClassName = GetListClassName(_className);

		// Now output the template
%>/*****************************************************************************/
/***                                                                       ***/
/***    This is an automatically generated file. It is generated using     ***/
/***    MyGeneration in conjunction with IBatisBusinessObject template.    ***/
/***                                                                       ***/
/***    DO NOT MODIFY THIS FILE DIRECTLY!                                  ***/
/***                                                                       ***/
/***    If you need to make changes either modify the template and         ***/
/***    regenerate or derive a class from this class and override.         ***/
/***                                                                       ***/
/*****************************************************************************/

using System;
using System.Collections.Generic;

using PebbleCode.Framework;
using PebbleCode.Entities;

namespace <%= _entityNamespace %>
{
	/// <summary>
	/// Generated by MyGeneration using the IBatis Boardbooks BusinessEntityCollection template
	/// </summary>
	[Serializable]
	public partial class <%= _listClassName %> : EntityList<<%= _className %>>
	{
		/// <summary>
		/// Construct a <%= _listClassName %> from an list of type <%= _className %>
		/// </summary>
		/// <param name="entries">list of type <%= _className %></param>
		public <%= _listClassName %>(IEnumerable<<%= _className %>> entries) : base(entries) { }

		/// <summary>
		/// Construct a <%= _listClassName %> from several <%= _className %>s
		/// </summary>
		/// <param name="entries">several initial <%= _className %>s for the list</param>
		public <%= _listClassName %>(params <%= _className %>[] entries) : base(entries) { }

		/// <summary>
		/// Construct a new <%= _listClassName %> 
		/// </summary>
		public <%= _listClassName %>() { }
		
        /// <summary>
		/// Implicit cast to array type 
		/// </summary>
		public static implicit operator <%= _className %>[](<%= _listClassName %> entities)
        {
            return entities.ToArray();
        }
		
        /// <summary>
		/// Implicit cast from array type 
		/// </summary>
		public static implicit operator <%= _listClassName %>(<%= _className %>[] entities)
        {
            return new <%= _listClassName %>(entities);
        }
		
		/// <summary>
		///	Returns a copy of the instance of <%= _className %>
		/// </summary>
		/// <remarks>
		/// Overrides the base version, but calls OnClone to allow base classes chance
		/// to clone their information
		/// </remarks>
		public override object Clone()
        {
			// Create a new list.
			<%= _listClassName %> clone = new <%= _listClassName %>();

			// Let the base class clone all of the items in our collection.
			OnClone(clone);
			// N.B. OnClone can be overridden in the handmade part of this
			// partial class to add extra code during clone (but make sure
			// you call the base version to copy the collection)
			
			// Return our pristine clone!
            return clone;			
		}
<%		
		// Create map shortcuts for foreign key fields
		foreach(IForeignKey foreignKey in GetNonPrimaryForeignKeys())
		{
			// Output a MapBy___ for all the others
			string propertyName = ToPropertyName(foreignKey.ForeignColumns[0].Name);
			ITable lookUpTable = foreignKey.ForeignColumns[0].Table;
			
		%>
        /// <summary>
        /// Map out the collection by <%= propertyName %>
        /// </summary>
        public Dictionary<<%= ColumnToMemberType(foreignKey.ForeignColumns[0]) %>, List<<%= ToClassName(lookUpTable.Name) %>>> MapBy<%= propertyName %>
        {
            get { return MapByField<<%= ColumnToMemberType(foreignKey.ForeignColumns[0]) %>>((entity) => entity.<%= propertyName %>); }
        }
<%
		}
		
		// Add a look up for all unique index columns
		foreach(IIndex index in GetUniqueIndexes())
		{
			%>
		/// <summary>
        /// Find an <%= _className %> by <%= index.Alias %>
        /// </summary><%
			foreach(IColumn column in index.Columns)
			{
			%>
        /// <param name="<%= ToVariableName(column.Name) %>">Index column value</param><%
			}
		%>
        /// <returns>The entity with the given index column values, null if no match</returns>
        public <%= _className %> FindBy<%= index.Alias %>(<%
			bool isFirst=true;
			foreach(IColumn column in index.Columns)
			{
				if (!isFirst)
				{
					%>, <%
				}
			%><%= ColumnToMemberType(column) %> <%= ToVariableName(column.Name) %><%
				isFirst = false;
			}%>)
		{
			return this.Find((<%= ToVariableName(_className) %>) => <%
			isFirst=true;
			foreach(IColumn column in index.Columns)
			{
				if (!isFirst) {%> &&<% }
			%>
				<%= ToVariableName(_className) %>.<%= ToPropertyName(column.Name) %> == <%= ToVariableName(column.Name) %><%
				isFirst = false;
			}
		%>);	
		}
<% 
		}
		
		// Add extra look ups for foreign key columns
		foreach(IForeignKey foreignKey in GetNonPrimaryForeignKeys())
		{
			WriteLookUp(foreignKey.ForeignColumns[0]);
		}
		
		// And looks ups for any column with a look up property
		foreach (IColumn column in _columns)
		{
			if (column.Properties.ContainsKey("lookUp"))
				WriteLookUp(column);
		}		

		// Create a ToReadOnly if we want read only classes as well
		if (_addReadOnlyAccessors)
		{ %>
		/// <summary>
		/// The readonly collection of <%= _className %> elements
		/// </summary>
		public <%= "ReadOnly" + GetListClassName(_className) %> AsReadOnly
		{
			get { return new <%= "ReadOnly" + GetListClassName(_className) %>(this); }
		}
<%		}
%>	}
}<%
	}

	private void WriteLookUp(IColumn lookUpColumn)
	{
%>
		/// <summary>
        /// Get <%= _className %> from the collection, by <%= ToVariableName(lookUpColumn.Name) %>
        /// </summary>
        /// <param name="<%= ToVariableName(lookUpColumn.Name) %>">Search value</param>
        /// <returns>All entities with the given search value</returns>
        public <%= _listClassName %> FindBy<%= ToPascalCase(lookUpColumn.Name) %>(<%= ColumnToMemberType(lookUpColumn) %> <%= ToVariableName(lookUpColumn.Name) %>)
		{
            return new <%= _listClassName %>(this.FindAll((<%= ToVariableName(_className) %>) => <%= ToVariableName(_className) %>.<%= ToPropertyName(lookUpColumn.Name) %> == <%= ToVariableName(lookUpColumn.Name) %>));
		}
<%
	}
}


%>
##|BODY_END
