##|TYPE Template
##|UNIQUEID c9f41b2a-c83c-4928-8b49-d320be10fe1b
##|TITLE HistoryTrigger
##|NAMESPACE IBatis.DataLayer
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE None
##|GUI_ENGINE .Net Script
##|GUI_LANGUAGE C#
##|GUI_BEGIN

public class GeneratedGui : DotNetScriptGui
{
	public GeneratedGui(ZeusContext context) : base(context) {}

	//-----------------------------------------
	// The User Interface Entry Point
	//-----------------------------------------
	public override void Setup()
	{
		// ** UNCOMMENT CODE BELOW TO SEE UI **

		//ui.Width  = 100;
		//ui.Height = 100;
		//GuiLabel lblDemo = ui.AddLabel("lblDemo", "Demo", "Demo Tooltip");
		//ui.ShowGui = true;
	}

}
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE .Net Script
##|BODY_LANGUAGE C#
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%#NAMESPACE System.IO, System.Text, System.Text.RegularExpressions, System.Globalization, System.Collections.Generic%><%
public class GeneratedTemplate : DotNetScriptTemplate
{
	%><%#FILE CSharp_IBatis_DataLayer_Common.cs%><%
	
	// Constructor
	public GeneratedTemplate(ZeusContext context) : base(context) {}

	//---------------------------------------------------
	// Render() is where you want to write your logic    
	//---------------------------------------------------
	public override void Render()
	{
		// Call a method defined in IBatis_Boardbooks_Common.cs
		AssignMemberVariables();

		// No columns, no output
		if( _columns.Count == 0 )
			return;
			
		// Write out a trigger file for each action (AFTER INSERT, AFTER UPDATE, AFTER DELETE)
		WriteTriggerFile("tr_" + _tableName + "_after_ins", true, "INSERT");
		WriteTriggerFile("tr_" + _tableName + "_after_upd", true, "UPDATE");
		WriteTriggerFile("tr_" + _tableName + "_after_del", true, "DELETE");
	}
	
	private string ToTriggerTime(bool after)
	{
		if (after)
			return "AFTER";
		else
			return "BEFORE";
	}
	
	private string ToRowReference(bool after, string triggerType)
	{
		if (triggerType.ToLower().Equals("insert")) return "NEW";
		if (triggerType.ToLower().Equals("delete")) return "OLD";
		
		if (after)
			return "NEW";
		else
			return "OLD";
	}
	
	private void WriteTriggerFile(string triggerName, bool executeAfter, string triggerType)
	{

%>

DELIMITER $$

--
-- Definition of trigger `<%= triggerName %>`
--

DROP TRIGGER IF EXISTS `<%= triggerName %>`$$

CREATE TRIGGER `<%= triggerName %>` <%= ToTriggerTime(executeAfter) %> <%= triggerType %> ON `<%= _tableName %>` FOR EACH ROW
BEGIN
  
  /* Log this action */
  INSERT INTO database_updates (updated_entity_type, updated_entity_id, update_type) VALUES ('<%= _className %>', <%= ToRowReference(executeAfter, triggerType) %>.ID, '<%= triggerType[0].ToString() %>');

END$$
<%
	}
	
}
%>
##|BODY_END
